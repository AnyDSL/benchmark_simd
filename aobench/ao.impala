static NAO_SAMPLES = 8;
static M_PI = 3.1415926535f;
static math = cpu_intrinsics;

struct Isect {
    t: f32,
    p: Vec3,
    n: Vec3,
    hit: i32,
}

struct Sphere {
    center: Vec3,
    radius: f32,
}

struct Plane {
    p: Vec3,
    n: Vec3,
};

struct Ray {
    org: Vec3,
    dir: Vec3,
};

fn @cif(c: bool, t: fn () -> ()) -> () {
    if rv_any(c) {
        if c {
            @@t()
        }
    }
}

fn @ray_plane_intersect(isect: &mut Isect, ray: &Ray, plane: &Plane) -> () {
    let d = -vec3_dot(plane.p, plane.n);
    let v = vec3_dot(ray.dir, plane.n);

    if math.fabsf(v) >= 1.0e-17f {
        let t = -(vec3_dot(ray.org, plane.n) + d) / v;

        if t > 0.0f && t < isect.t {
            isect.t = t;
            isect.hit = 1;
            isect.p = vec3_add(ray.org, vec3_mulf(ray.dir, t));
            isect.n = plane.n;
        }
    }
}

fn @ray_sphere_intersect(isect: &mut Isect, ray: Ray, sphere: &Sphere) -> () {
    let rs = vec3_sub(ray.org, sphere.center);

    let B = vec3_dot(rs, ray.dir);
    let C = vec3_dot(rs, rs) - sphere.radius * sphere.radius;
    let D = B * B - C;

    if D > 0.f {
        let t = -B - math.sqrtf(D);

        if t > 0.f && t < isect.t {
            isect.t = t;
            isect.hit = 1;
            isect.p = vec3_add(ray.org, vec3_mulf(ray.dir, t));
            isect.n = vec3_normalize(math, vec3_sub(isect.p, sphere.center));
        }
    }
}

fn @orthoBasis(basis: &mut [Vec3 * 3], n: Vec3) -> () {
    basis(2) = n;
    basis(1).x = 0.0f; basis(1).y = 0.0f; basis(1).z = 0.0f;

    if ((n.x < 0.6f) && (n.x > -0.6f)) {
        basis(1).x = 1.0f;
    } else if ((n.y < 0.6f) && (n.y > -0.6f)) {
        basis(1).y = 1.0f;
    } else if ((n.z < 0.6f) && (n.z > -0.6f)) {
        basis(1).z = 1.0f;
    } else {
        basis(1).x = 1.0f;
    }

    basis(0) = vec3_normalize(math, vec3_cross(basis(1), basis(2)));
    basis(1) = vec3_normalize(math, vec3_cross(basis(2), basis(0)));
}

fn @ambient_occlusion(isect: &Isect, plane: &Plane, spheres: &[Sphere * 3], rngstate: &mut RNGState) -> f32 {
    let eps = 0.0001f;
    let mut basis: [Vec3 * 3];
    let mut occlusion = 0.0f;

    let p = vec3_add(isect.p, vec3_mulf(isect.n, eps));

    orthoBasis(&mut basis, isect.n);

    let ntheta = NAO_SAMPLES;
    let nphi   = NAO_SAMPLES;
    for j in range(0, ntheta) {
        for i in range(0, nphi) {
            let mut ray: Ray;
            let mut occIsect: Isect;

            let theta = math.sqrtf(frandom(rngstate));
            let phi   = 2.0f * M_PI * frandom(rngstate);
            //let x = cos(phi) * theta;
            //let y = sin(phi) * theta;
            let (ys, xs) = sincos(phi);
            let x = xs * theta;
            let y = ys * theta;
            let z = math.sqrtf(1.0f - theta * theta);

            // local . global
            let rx = x * basis(0).x + y * basis(1).x + z * basis(2).x;
            let ry = x * basis(0).y + y * basis(1).y + z * basis(2).y;
            let rz = x * basis(0).z + y * basis(1).z + z * basis(2).z;

            ray.org = p;
            ray.dir.x = rx;
            ray.dir.y = ry;
            ray.dir.z = rz;

            occIsect.t   = 1.0e+17f;
            occIsect.hit = 0;

            for snum in unroll(0, 3) {
                ray_sphere_intersect(&mut occIsect, ray, spheres(snum));
            }

            ray_plane_intersect(&mut occIsect, ray, plane);

            if occIsect.hit != 0 { occlusion += 1.0f }
        }
    }

    occlusion = ((ntheta * nphi) as f32 - occlusion) / ((ntheta * nphi) as f32);
    occlusion
}

fn @ilog2(i: i32) -> i32 {
    fn @(?p & ?i) ilog2_helper(j: i32, p: i32) -> i32 {
        if p < i {
            ilog2_helper(j + 1, p * 2)
        } else {
            j
        }
    }
    ilog2_helper(0, 1)
}

fn @foreach_tiled(i: i32, vec_len: i32, x0: i32, x1: i32, y0: i32, y1: i32, ulen: i32, vlen: i32, body: fn (i32, i32, i32, i32) -> ()) -> () {
    let n = ilog2(vec_len);
    let m = n / 2 + select(n % 2 == 0, 0, 1);
    let xstep = 1 << m;
    let ystep = vec_len >> m;
    let xmask = xstep - 1;
    for y in range_step(y0, y1, ystep) {
        for x in range_step(x0, x1, xstep) {
            for u in range(0, ulen) {
                for v in range(0, vlen) {
                    @@body(x + (i & xmask), y + (i >> m), u, v)
                }
            }
        }
    }
}

/* Compute the image for the scanlines from [y0,y1), for an overall image
   of width w and height h.
 */
fn @ao_scanlines(y0: i32, y1: i32, w: i32, h: i32,  nsubsamples: i32, image: &mut [f32]) -> () {
    static plane = Plane{p: Vec3{x: 0.0f, y: -0.5f, z: 0.0f }, n: Vec3{x: 0.f, y: 1.f, z: 0.f } };
    static spheres = [
        Sphere{center: Vec3{x: -2.0f, y: 0.0f, z: -3.5f}, radius: 0.5f },
        Sphere{center: Vec3{x: -0.5f, y: 0.0f, z: -3.0f}, radius: 0.5f },
        Sphere{center: Vec3{x:  1.0f, y: 0.0f, z: -2.2f}, radius: 0.5f }
    ];
    let invSamples = 1.f / (nsubsamples as f32);

    let vec_len = 8;
    for i in vectorize(vec_len) {
        let mut rngstate: RNGState;
        seed_rng(&mut rngstate, (y0 + i) as u32);

        for x, y, u, v in foreach_tiled(i, vec_len, 0, w, y0, y1, nsubsamples, nsubsamples) {
            let du = (u as f32) * invSamples;
            let dv = (v as f32) * invSamples;

            // Figure out x,y pixel in NDC
            let mut px =  (x as f32 + du - (w as f32 / 2.0f)) / (w as f32 / 2.0f);
            let py = -(y as f32 + dv - (h as f32 / 2.0f)) / (h as f32 / 2.0f);

            // Scale NDC based on width/height ratio, supporting non-square image output
            px *= (w as f32) / (h as f32);

            let mut ret = 0.f;
            let mut ray: Ray;
            let mut isect: Isect;

            ray.org = make_vec3(0.f, 0.f, 0.f);

            // Poor man's perspective projection
            ray.dir.x = px;
            ray.dir.y = py;
            ray.dir.z = -1.0f;
            ray.dir = vec3_normalize(math, ray.dir);

            isect.t   = 1.0e+17f;
            isect.hit = 0;

            for snum in unroll(0, 3) {
                ray_sphere_intersect(&mut isect, ray, spheres(snum));
            }

            ray_plane_intersect(&mut isect, ray, plane);

            cif(isect.hit != 0, || {
                ret = ambient_occlusion(&mut isect, &plane, &spheres, &mut rngstate);
                ret *= invSamples * invSamples;

                let offset = 3 * (y * w + x);
                image(offset)   += ret;
                image(offset+1) += ret;
                image(offset+2) += ret;
            })
        }
    }
}

extern
fn ao_impala(w: i32, h: i32, nsubsamples: i32, image: &mut [f32]) -> () {
    ao_scanlines(0, h, w, h, nsubsamples, image);
}
