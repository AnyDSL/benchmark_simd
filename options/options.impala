static math = cpu_intrinsics;
static BINOMIAL_NUM = 64;

fn CND(X: f32) -> f32 {
    let L = math.fabsf(X);

    let k = 1.0f / (1.0f + 0.2316419f * L);
    let k2 = k*k;
    let k3 = k2*k;
    let k4 = k2*k2;
    let k5 = k3*k2;

    let invSqrt2Pi = 0.39894228040f;
    let mut w = (0.31938153f * k - 0.356563782f * k2 + 1.781477937f * k3 +
               -1.821255978f * k4 + 1.330274429f * k5);
    w *= invSqrt2Pi * exp(-L * L * .5f);

    if X > 0.f {
        w = 1.0f - w;
    }
    w
}

extern
fn black_scholes_impala(Sa: &[f32], Xa: &[f32], Ta: &[f32], ra: &[f32], va: &[f32],
                        result: &mut [f32], count: i32) -> () {
    for i in each(0, count) {
        let S = Sa(i);
        let X = Xa(i);
        let T = Ta(i);
        let r = ra(i);
        let v = va(i);

        let d1 = (math.logf(S/X) + (r + v * v * .5f) * T) / (v * math.sqrtf(T));
        let d2 = d1 - v * math.sqrtf(T);

        result(i) = S * CND(d1) - X * math.expf(-r * T) * CND(d2);
    }
}

//------------------------------------------------------------------------------

fn rev_range(mut a: i32, b: i32, body: fn(i32) -> ()) -> () {
    if a --> b {
        body(a);
        rev_range(a, b, body)
    }
}

fn binomial_put(S: f32, X: f32, T: f32, r: f32, v: f32) -> f32 {
    let mut V: [f32 * 64]; // BINOMIAL_NUM = 64

    let dt = T / (BINOMIAL_NUM as f32);
    let u = exp(v * math.sqrtf(dt));
    let d = 1.f / u;
    let disc = exp(r * dt);
    let Pu = (disc - d) / (u - d);

    for j in range(0, BINOMIAL_NUM) {
        let upow = math.powf(u, (2*j-BINOMIAL_NUM) as f32);
        V(j) = math.fmaxf(0.f, X - S * upow);
    }

    for j in rev_range(BINOMIAL_NUM, 0) {
        for k in range(0, j) {
            V(k) = ((1.f - Pu) * V(k) + Pu * V(k + 1)) / disc;
        }
    }
    V(0)
}


extern
fn binomial_put_impala(Sa: &[f32], Xa: &[f32], Ta: &[f32], ra: &[f32], va: &[f32],
                       result: &mut [f32], count: i32) -> () {
    for i in each(0, count) {
        let S = Sa(i);
        let X = Xa(i);
        let T = Ta(i);
        let r = ra(i);
        let v = va(i);
        result(i) = binomial_put(S, X, T, r, v);
    }
}
